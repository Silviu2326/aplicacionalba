/**
 * Ejemplo de uso del sistema de clonaci√≥n din√°mica de proyectos
 * 
 * Este ejemplo demuestra c√≥mo el FE Manager Agent maneja autom√°ticamente
 * la clonaci√≥n de repositorios desde GitHub y el procesamiento de historias de usuario.
 */

import { PrismaClient } from '@prisma/client';
import { Redis } from 'ioredis';
import { ProjectService, ProjectUtils } from '../src/project';
import { FeManagerOrchestrator } from '../src/orchestrator';
import { logger } from '../../../../shared/utils/logger';

// Configuraci√≥n de ejemplo
const EXAMPLE_PROJECT = {
  id: '507f1f77bcf86cd799439011',
  name: 'Mi Proyecto Frontend',
  githubUrl: 'https://github.com/usuario/mi-proyecto.git'
};

const EXAMPLE_STORIES = [
  {
    id: 'story-1',
    title: 'Crear p√°gina de inicio',
    description: 'Implementar una p√°gina de inicio con hero section y navegaci√≥n',
    priority: 'high' as const,
    status: 'backlog' as const,
    pageId: 'page-home',
    projectId: EXAMPLE_PROJECT.id
  },
  {
    id: 'story-2', 
    title: 'Agregar formulario de contacto',
    description: 'Crear un formulario de contacto con validaci√≥n',
    priority: 'medium' as const,
    status: 'backlog' as const,
    pageId: 'page-contact',
    projectId: EXAMPLE_PROJECT.id
  }
];

/**
 * Ejemplo 1: Configuraci√≥n b√°sica de proyecto
 */
async function exampleBasicProjectSetup() {
  console.log('\nüîÑ Ejemplo 1: Configuraci√≥n B√°sica de Proyecto\n');
  
  const prisma = new PrismaClient();
  const projectService = new ProjectService(prisma);
  
  try {
    // 1. Validar configuraci√≥n del proyecto
    console.log('1. Validando configuraci√≥n del proyecto...');
    const validation = await projectService.validateProjectConfig(EXAMPLE_PROJECT.id);
    
    if (!validation.valid) {
      console.error('‚ùå Error de configuraci√≥n:', validation.error);
      return;
    }
    console.log('‚úÖ Configuraci√≥n v√°lida');
    
    // 2. Configurar proyecto (clona autom√°ticamente si es necesario)
    console.log('\n2. Configurando proyecto...');
    const setupResult = await projectService.setupProject(EXAMPLE_PROJECT.id);
    
    if (!setupResult.success) {
      console.error('‚ùå Error en configuraci√≥n:', setupResult.error);
      return;
    }
    
    console.log('‚úÖ Proyecto configurado exitosamente');
    console.log('üìÅ Directorio:', setupResult.projectInfo.projectPath);
    console.log('üîó GitHub URL:', setupResult.projectInfo.githubUrl);
    console.log('üìã Estado clonado:', setupResult.projectInfo.isCloned);
    
    // 3. Analizar estructura del proyecto
    if (setupResult.projectInfo.projectPath) {
      console.log('\n3. Analizando estructura del proyecto...');
      const structure = await ProjectUtils.analyzeProjectStructure(
        setupResult.projectInfo.projectPath
      );
      
      console.log('üèóÔ∏è Framework detectado:', structure.framework);
      console.log('üì¶ Package manager:', structure.packageManager);
      console.log('üìÇ Tiene src/:', structure.hasSrcFolder);
      console.log('üìÑ Tiene pages/:', structure.hasPagesFolder);
      console.log('üîå Tiene API/:', structure.hasApiFolder);
      
      // 4. Obtener rutas importantes
      console.log('\n4. Obteniendo rutas importantes...');
      const paths = await ProjectUtils.getProjectPaths(
        setupResult.projectInfo.projectPath
      );
      
      console.log('üìç Rutas del proyecto:');
      console.log('  - Root:', paths.root);
      console.log('  - Src:', paths.src || 'No encontrado');
      console.log('  - Pages:', paths.pages || 'No encontrado');
      console.log('  - Components:', paths.components || 'No encontrado');
      console.log('  - API:', paths.api || 'No encontrado');
      
      // 5. Generar resumen
      console.log('\n5. Resumen del proyecto:');
      const summary = await ProjectUtils.getProjectSummary(
        setupResult.projectInfo.projectPath
      );
      console.log('üìä', summary);
    }
    
  } catch (error) {
    console.error('‚ùå Error en el ejemplo:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Ejemplo 2: Procesamiento completo con Orchestrator
 */
async function exampleFullProcessing() {
  console.log('\nüöÄ Ejemplo 2: Procesamiento Completo con Orchestrator\n');
  
  const prisma = new PrismaClient();
  const redis = new Redis(process.env.REDIS_URL || 'redis://localhost:6379');
  
  try {
    // Configurar dependencias del orchestrator
    const dependencies = {
      eventBus: new (await import('../src/events/EventBus')).EventBus(),
      vectorStore: new (await import('../src/context/VectorStore')).VectorStore(),
      prioritizer: new (await import('../src/prioritization/SmartPrioritizer')).SmartPrioritizer(),
      tokenGuardian: new (await import('../src/backpressure/TokenGuardian')).TokenGuardian(),
      retryManager: new (await import('../src/retry/SmartRetryManager')).SmartRetryManager(),
      telemetryManager: new (await import('../src/observability/TelemetryManager')).TelemetryManager(),
      pluginManager: new (await import('../src/plugins/PluginManager')).PluginManager(),
      prisma
    };
    
    // Crear orchestrator
    const orchestrator = new FeManagerOrchestrator(redis, dependencies);
    
    console.log('1. Iniciando procesamiento de historias...');
    
    // Procesar historias (incluye clonaci√≥n autom√°tica)
    const result = await orchestrator.processStories({
      stories: EXAMPLE_STORIES,
      projectId: EXAMPLE_PROJECT.id
    });
    
    console.log('‚úÖ Procesamiento iniciado exitosamente');
    console.log('üî¢ Jobs creados:', result.totalJobs);
    console.log('üÜî Job IDs:', result.jobIds.slice(0, 3), '...');
    
    console.log('\nüìã El sistema ha:');
    console.log('  1. ‚úÖ Clonado el repositorio autom√°ticamente');
    console.log('  2. ‚úÖ Analizado la estructura del proyecto');
    console.log('  3. ‚úÖ Creado jobs para procesar las historias');
    console.log('  4. ‚úÖ Incluido el directorio del proyecto en los metadatos');
    
  } catch (error) {
    console.error('‚ùå Error en procesamiento:', error.message);
  } finally {
    await prisma.$disconnect();
    redis.disconnect();
  }
}

/**
 * Ejemplo 3: Gesti√≥n de m√∫ltiples proyectos
 */
async function exampleMultipleProjects() {
  console.log('\nüîÑ Ejemplo 3: Gesti√≥n de M√∫ltiples Proyectos\n');
  
  const prisma = new PrismaClient();
  const projectService = new ProjectService(prisma);
  
  try {
    // 1. Listar todos los proyectos
    console.log('1. Listando proyectos...');
    const projects = await projectService.listProjects();
    
    console.log(`üìã Encontrados ${projects.length} proyectos:`);
    projects.forEach((project, index) => {
      console.log(`  ${index + 1}. ${project.name}`);
      console.log(`     üîó ${project.githubUrl}`);
      console.log(`     üìÅ ${project.isCloned ? 'Clonado' : 'No clonado'}`);
      if (project.projectPath) {
        console.log(`     üìç ${project.projectPath}`);
      }
      console.log('');
    });
    
    // 2. Configurar m√∫ltiples proyectos en paralelo
    console.log('2. Configurando proyectos en paralelo...');
    const setupPromises = projects.slice(0, 3).map(project => 
      projectService.setupProject(project.id)
    );
    
    const results = await Promise.allSettled(setupPromises);
    
    results.forEach((result, index) => {
      const project = projects[index];
      if (result.status === 'fulfilled' && result.value.success) {
        console.log(`‚úÖ ${project.name}: Configurado`);
      } else {
        console.log(`‚ùå ${project.name}: Error`);
      }
    });
    
    // 3. Limpiar proyectos antiguos
    console.log('\n3. Limpiando proyectos antiguos...');
    await projectService.cleanupOldProjects();
    console.log('‚úÖ Limpieza completada');
    
  } catch (error) {
    console.error('‚ùå Error en gesti√≥n m√∫ltiple:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Ejemplo 4: Manejo de errores y validaciones
 */
async function exampleErrorHandling() {
  console.log('\n‚ö†Ô∏è Ejemplo 4: Manejo de Errores y Validaciones\n');
  
  const prisma = new PrismaClient();
  const projectService = new ProjectService(prisma);
  
  try {
    // 1. Proyecto inexistente
    console.log('1. Probando proyecto inexistente...');
    const invalidResult = await projectService.setupProject('invalid-id');
    console.log('‚ùå Resultado esperado:', invalidResult.error);
    
    // 2. Proyecto sin githubUrl
    console.log('\n2. Probando validaci√≥n de configuraci√≥n...');
    const validation = await projectService.validateProjectConfig('project-without-github');
    if (!validation.valid) {
      console.log('‚ùå Error esperado:', validation.error);
    }
    
    // 3. URL de GitHub inv√°lida
    console.log('\n3. Probando URL inv√°lida...');
    // Simular proyecto con URL inv√°lida
    // (En un caso real, esto vendr√≠a de la base de datos)
    
    console.log('‚úÖ Manejo de errores funcionando correctamente');
    
  } catch (error) {
    console.error('‚ùå Error inesperado:', error.message);
  } finally {
    await prisma.$disconnect();
  }
}

/**
 * Funci√≥n principal que ejecuta todos los ejemplos
 */
async function runExamples() {
  console.log('üéØ Ejemplos del Sistema de Clonaci√≥n Din√°mica de Proyectos');
  console.log('=' .repeat(60));
  
  try {
    await exampleBasicProjectSetup();
    await exampleFullProcessing();
    await exampleMultipleProjects();
    await exampleErrorHandling();
    
    console.log('\nüéâ Todos los ejemplos completados exitosamente!');
    console.log('\nüìö Para m√°s informaci√≥n, consulta:');
    console.log('  - README.md en /src/project/');
    console.log('  - Documentaci√≥n del ProjectService');
    console.log('  - Logs del sistema para debugging');
    
  } catch (error) {
    console.error('‚ùå Error ejecutando ejemplos:', error.message);
  }
}

// Ejecutar ejemplos si este archivo se ejecuta directamente
if (require.main === module) {
  runExamples().catch(console.error);
}

export {
  exampleBasicProjectSetup,
  exampleFullProcessing,
  exampleMultipleProjects,
  exampleErrorHandling,
  runExamples
};