{
  "timestamp": 1750009066701,
  "data": {
    "models": [],
    "controllers": [],
    "routes": [
      {
        "name": "AnalyticsRoutes",
        "fileName": "analytics.routes.js",
        "content": "const express = require('express');\nconst { z } = require('zod');\nconst { validate } = require('zod-express-middleware');\nconst rateLimit = require('express-rate-limit');\nconst mongoose = require('mongoose');\n\n// --- Importaciones de la Arquitectura --- //\n\n// 1. Controlador: Orquesta la solicitud y la respuesta.\nconst AnalyticsController = require('../controllers/analytics.controller.js');\n\n// 2. Middleware de Autenticación (simulado para demostración)\n// En una app real, este middleware verificaría un JWT y adjuntaría el usuario a `req`.\nconst requireAuth = (requiredRoles = []) => (req, res, next) => {\n  // Aquí iría la lógica para decodificar el token JWT del header 'Authorization'\n  // const user = jwt.verify(token, process.env.JWT_SECRET);\n  // Por ahora, simulamos un usuario autenticado para que las rutas funcionen.\n  const mockUser = { id: '65f1c3f4e5a6b7c8d9e0f1a2', roles: ['admin', 'creator'] };\n  req.user = mockUser;\n\n  const userHasRole = requiredRoles.length === 0 || mockUser.roles.some(role => requiredRoles.includes(role));\n\n  if (!userHasRole) {\n    return res.status(403).json({ message: 'Acceso denegado. Permisos insuficientes.' });\n  }\n  next();\n};\n\n// --- Middlewares de Utilidad --- //\n\n// 3. Rate Limiter: Limita las solicitudes por IP para prevenir ataques de fuerza bruta o DoS.\nconst apiLimiter = rateLimit({\n  windowMs: 60 * 1000, // 1 minuto\n  max: 10, // Limita cada IP a 10 solicitudes por minuto\n  standardHeaders: true, // Devuelve información del límite en los headers `RateLimit-*`\n  legacyHeaders: false, // Deshabilita los headers `X-RateLimit-*`\n  message: 'Demasiadas solicitudes desde esta IP, por favor intente de nuevo después de un minuto.',\n});\n\n// --- Esquemas de Validación (Zod) --- //\n\n// 4. Esquema para validar que el parámetro de ruta `cursoId` es un ObjectId válido de MongoDB.\nconst getCourseAnalyticsSchema = {\n  params: z.object({\n    cursoId: z.string().refine((val) => mongoose.Types.ObjectId.isValid(val), {\n      message: 'El ID del curso proporcionado no es un ObjectId válido.',\n    }),\n  }),\n};\n\n\n// --- Definición de Rutas --- //\n\nconst router = express.Router();\n\n/**\n * @openapi\n * /api/v1/analytics/cursos:\n *   get:\n *     summary: Obtiene las analíticas de todos los cursos creados\n *     description: Retorna una lista de cursos con sus métricas principales de analíticas. Requiere rol de 'admin' o 'creator'.\n *     tags:\n *       - Analytics\n *     security:\n *       - bearerAuth: []\n *     responses:\n *       '200':\n *         description: Lista de analíticas de cursos obtenida exitosamente.\n *         content:\n *           application/json:\n *             schema:\n *               type: object\n *               properties:\n *                 cursos: \n *                   type: array\n *                   items:\n *                     $ref: '#/components/schemas/Curso'\n *       '401':\n *         description: No autorizado (token no válido o no proporcionado).\n *       '403':\n *         description: Acceso denegado (rol insuficiente).\n *       '429':\n *         description: Demasiadas solicitudes (Rate Limiting).\n */\nrouter.get(\n  '/cursos',\n  apiLimiter,                          // Middleware: Rate Limiting por IP\n  requireAuth(['admin', 'creator']),   // Middleware: Seguridad JWT + Roles\n  AnalyticsController.getCoursesAnalytics // Llama al método del controlador\n);\n\n/**\n * @openapi\n * /api/v1/analytics/cursos/{cursoId}:\n *   get:\n *     summary: Obtiene las analíticas detalladas de un curso específico\n *     description: Retorna las métricas detalladas, incluyendo datos por lección, para un curso específico por su ID. Requiere rol de 'admin' o 'creator'.\n *     tags:\n *       - Analytics\n *     security:\n *       - bearerAuth: []\n *     parameters:\n *       - in: path\n *         name: cursoId\n *         required: true\n *         schema:\n *           type: string\n *           description: El ID de MongoDB del curso.\n *           example: '65f1c3f4e5a6b7c8d9e0f1a2'\n *     responses:\n *       '200':\n *         description: Analíticas del curso obtenidas exitosamente.\n *         content:\n *           application/json:\n *             schema:\n *               $ref: '#/components/schemas/Curso'\n *       '400':\n *         description: Solicitud inválida (e.g., el ID del curso no es válido).\n *       '401':\n *         description: No autorizado.\n *       '403':\n *         description: Acceso denegado.\n *       '404':\n *         description: Curso no encontrado.\n *       '429':\n *         description: Demasiadas solicitudes.\n */\nrouter.get(\n  '/cursos/:cursoId',\n  apiLimiter,                               // Middleware: Rate Limiting por IP\n  requireAuth(['admin', 'creator']),      // Middleware: Seguridad JWT + Roles\n  validate(getCourseAnalyticsSchema),     // Middleware: Validación del formato del parámetro\n  AnalyticsController.getCourseAnalyticsById // Llama al método del controlador\n);\n\nmodule.exports = router;\n",
        "description": "Este archivo define las rutas para el endpoint '/api/v1/analytics'. Utiliza un enrutador de Express para conectar las solicitudes HTTP con los métodos correspondientes del 'AnalyticsController'. Cada ruta está protegida con múltiples capas de middleware para garantizar seguridad, rendimiento y robustez:\n\n1.  **Versioning**: Todas las rutas están prefijadas con '/api/v1', permitiendo futuras versiones de la API sin romper la compatibilidad.\n2.  **Rate Limiting**: Se aplica un límite de 10 solicitudes por minuto por IP para prevenir abusos.\n3.  **Autenticación y Autorización**: Se utiliza un middleware 'requireAuth' que simula la verificación de un token JWT y comprueba que el usuario tenga los roles requeridos ('admin' o 'creator'), asegurando que solo usuarios autorizados puedan acceder a las analíticas.\n4.  **Validación de Esquema**: La ruta que recibe un 'cursoId' como parámetro utiliza 'zod-express-middleware' para validar que el ID tenga el formato correcto de un ObjectId de MongoDB antes de que la solicitud llegue al controlador, previniendo errores en la capa de servicio y base de datos.\n5.  **Documentación**: Las rutas están documentadas con comentarios en formato JSDoc/OpenAPI (Swagger) para facilitar la generación automática de documentación de la API.\n6.  **Conexión con el Controlador**: Las rutas delegan toda la lógica de negocio al 'AnalyticsController', manteniendo el archivo de rutas limpio y enfocado únicamente en el enrutamiento y la aplicación de middleware."
      }
    ],
    "services": [],
    "middleware": [],
    "config": [],
    "utils": [],
    "tests": []
  },
  "metadata": {
    "promptLength": 6878,
    "options": {
      "type": "routes",
      "framework": "express",
      "includeDatabase": true,
      "apiFile": "Analytics"
    },
    "generatedAt": "2025-06-15T17:37:46.701Z",
    "size": 6778
  }
}
