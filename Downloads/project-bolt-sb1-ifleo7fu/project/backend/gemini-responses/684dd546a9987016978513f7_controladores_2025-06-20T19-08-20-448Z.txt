Claro, aqu칤 tienes el an치lisis y la generaci칩n de la estructura de controladores para Express.js, bas치ndose en el archivo de API proporcionado y siguiendo las mejores pr치cticas y tus instrucciones espec칤ficas.

```json
{
  "controllers": [
    {
      "name": "CursoController",
      "fileName": "cursoController.js",
      "content": "const cursosDestacadosDB = [\n    {\n      id: 1,\n      title: \"Introducci칩n a la Programaci칩n Web\",\n      instructor: \"Mar칤a Gonz치lez\",\n      level: \"Principiante\",\n      duration: \"8 horas\",\n      rating: 4.8,\n      students: 1245,\n      thumbnail: \"https://images.pexels.com/photos/1181271/pexels-photo-1181271.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2\",\n    },\n    {\n      id: 2,\n      title: \"Machine Learning para principiantes\",\n      instructor: \"Carlos Ruiz\",\n      level: \"Intermedio\",\n      duration: \"12 horas\",\n      rating: 4.6,\n      students: 852,\n      thumbnail: \"https://images.pexels.com/photos/373543/pexels-photo-373543.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2\",\n    },\n    {\n      id: 3,\n      title: \"Dise침o UX/UI Avanzado\",\n      instructor: \"Laura Mart칤nez\",\n      level: \"Avanzado\",\n      duration: \"15 horas\",\n      rating: 4.9,\n      students: 678,\n      thumbnail: \"https://images.pexels.com/photos/196644/pexels-photo-196644.jpeg?auto=compress&cs=tinysrgb&w=1260&h=750&dpr=2\",\n    },\n];\n\nconst courseTemplates = {\n    'blockchain': {\n      title: 'Blockchain desde Cero',\n      summary: 'Aprende los fundamentos de la tecnolog칤a blockchain, desde conceptos b치sicos hasta implementaciones pr치cticas. Incluye criptograf칤a, consenso y casos de uso reales.',\n      duration: '8-12 horas',\n      level: 'Principiante',\n      modules: 6\n    },\n    'inteligencia artificial': {\n      title: 'Introducci칩n a la Inteligencia Artificial',\n      summary: 'Descubre el fascinante mundo de la IA, desde algoritmos b치sicos hasta machine learning. Perfecto para comenzar tu viaje en el campo de la inteligencia artificial.',\n      duration: '10-15 horas',\n      level: 'Principiante',\n      modules: 8\n    },\n    'desarrollo web': {\n      title: 'Desarrollo Web Moderno',\n      summary: 'Domina las tecnolog칤as web actuales para construir aplicaciones robustas y escalables.',\n      duration: '20-25 horas',\n      level: 'Intermedio',\n      modules: 10\n    }\n};\n\n/**\n * @desc    Obtiene los cursos destacados para la p치gina de inicio.\n * @route   GET /api/cursos/destacados\n * @access  Public\n */\nexports.getFeaturedCourses = async (req, res) => {\n  try {\n    // En una aplicaci칩n real, aqu칤 se har칤a una consulta a la base de datos.\n    // Ejemplo: const cursos = await Curso.find({ esDestacado: true }).limit(3);\n    \n    // Simulamos una latencia de red de 500ms como en el archivo original.\n    await new Promise(resolve => setTimeout(resolve, 500));\n    \n    // Si no hay cursos, podr칤amos devolver un 404, pero para \"destacados\"\n    // un array vac칤o suele ser una respuesta 200 OK v치lida.\n    res.status(200).json({\n      success: true,\n      count: cursosDestacadosDB.length,\n      data: cursosDestacadosDB,\n    });\n\n  } catch (error) {\n    console.error('Error al obtener cursos destacados:', error);\n    res.status(500).json({ \n      success: false, \n      error: 'Error del servidor al procesar la solicitud.' \n    });\n  }\n};\n\n/**\n * @desc    Genera un curso de demostraci칩n basado en un tema.\n * @route   POST /api/cursos/demo\n * @access  Private (requiere autenticaci칩n)\n */\nexports.createDemoCourse = async (req, res) => {\n  // 1. Validaci칩n de la entrada\n  const { tema } = req.body;\n  if (!tema || typeof tema !== 'string' || tema.trim().length === 0) {\n    return res.status(400).json({\n      success: false,\n      error: 'El campo \"tema\" es requerido y debe ser un string no vac칤o.',\n    });\n  }\n\n  const topic = tema.trim().toLowerCase();\n\n  try {\n    // 2. L칩gica de negocio principal: intentar llamar a un servicio externo.\n    // En una arquitectura limpia, esto estar칤a en un archivo de servicio.\n    // Ejemplo: const cursoGenerado = await externalApiService.generateCourse(topic);\n    // Para esta simulaci칩n, forzamos un error para probar la l칩gica de fallback.\n    throw new Error(\"Servicio externo de generaci칩n de cursos no disponible.\");\n\n    // Si la llamada al servicio externo fuera exitosa, la respuesta ser칤a:\n    // res.status(201).json({ success: true, data: cursoGenerado });\n\n  } catch (error) {\n    console.warn(`API externa no disponible, usando fallback mock. Raz칩n: ${error.message}`);\n    \n    // 3. L칩gica de fallback como se describe en el archivo original\n    try {\n        const template = courseTemplates[topic];\n        \n        if (!template) {\n            // Si el tema no tiene una plantilla de fallback, se considera un error 404.\n            return res.status(404).json({\n                success: false,\n                error: `No se encontr칩 una plantilla de curso para el tema: \"${tema}\"`\n            });\n        }\n        \n        // Simular la latencia de la generaci칩n mock\n        await new Promise(resolve => setTimeout(resolve, 1500));\n        \n        const demoCourse = {\n            id: `demo-${Date.now()}`,\n            ...template,\n            topic: tema,\n            source: 'mock_fallback'\n        };\n\n        // Respuesta exitosa (201 Created) usando el fallback\n        res.status(201).json({\n            success: true,\n            message: 'Curso demo generado exitosamente desde el sistema de fallback.',\n            data: demoCourse,\n        });\n\n    } catch (fallbackError) {\n        // Este catch maneja errores dentro de la propia l칩gica de fallback.\n        console.error('Error en la l칩gica de fallback:', fallbackError);\n        res.status(500).json({ \n            success: false, \n            error: 'Error cr칤tico del servidor al intentar generar el curso demo.' \n        });\n    }\n  }\n};",
      "description": "Controlador para gestionar las operaciones relacionadas con los cursos, como obtener la lista de cursos destacados y generar cursos de demostraci칩n basados en un tema."
    },
    {
      "name": "UsuarioController",
      "fileName": "usuarioController.js",
      "content": "const userStatsDB = {\n    coursesInProgress: 3,\n    coursesCompleted: 5,\n    totalStudyTime: 28, // horas\n    streak: 7, // d칤as\n    achievements: [\n      {\n        id: 1,\n        name: \"Primer curso completado\",\n        icon: \"游꿉\",\n        unlocked: true,\n      },\n      {\n        id: 2,\n        name: \"Aprendiz dedicado\",\n        progress: 70,\n        requirement: \"Completar 10 cursos\",\n      },\n    ],\n};\n\n/**\n * @desc    Obtiene las estad칤sticas del usuario autenticado.\n * @route   GET /api/usuario/estadisticas\n * @access  Private (asume que un middleware de autenticaci칩n ya verific칩 al usuario)\n */\nexports.getUserStats = async (req, res) => {\n  try {\n    // En una aplicaci칩n real, el ID del usuario vendr칤a del token de autenticaci칩n\n    // que un middleware previo habr칤a colocado en `req.user`.\n    // const userId = req.user.id;\n\n    // La l칩gica buscar칤a las estad칤sticas de ese usuario en la base de datos.\n    // Ejemplo: const stats = await Stats.findOne({ userId: userId });\n    // if (!stats) {\n    //   return res.status(404).json({ success: false, error: 'Estad칤sticas no encontradas para este usuario.' });\n    // }\n\n    // Simulamos la latencia de red de 300ms como en el archivo original.\n    await new Promise(resolve => setTimeout(resolve, 300));\n\n    // Se asume que siempre se encuentran las estad칤sticas para un usuario v치lido.\n    // Si no, la l칩gica del `if (!stats)` de arriba manejar칤a el caso 404 Not Found.\n    res.status(200).json({\n      success: true,\n      data: userStatsDB,\n    });\n\n  } catch (error) {\n    console.error('Error al obtener estad칤sticas del usuario:', error);\n    res.status(500).json({\n      success: false,\n      error: 'Error del servidor al procesar la solicitud.',\n    });\n  }\n};",
      "description": "Controlador para gestionar las operaciones del perfil de usuario. Actualmente, incluye la obtenci칩n de las estad칤sticas de progreso del usuario autenticado."
    }
  ]
}
```