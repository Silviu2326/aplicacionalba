Claro, basándome en el archivo `mockData.js` proporcionado y tus especificaciones, he generado la estructura de rutas para Express.js.

He creado dos archivos de rutas, uno para `cursos` y otro para `testimonios`, siguiendo las convenciones RESTful y las mejores prácticas de desarrollo con Node.js y Express.

### Análisis del `mockData`:
1.  **`mockCursosPopulares`**: Representa un recurso **"Cursos"**. La estructura de datos permite operaciones CRUD completas (Crear, Leer, Actualizar, Eliminar). Se puede obtener una lista completa de cursos (`GET /api/cursos`) o un curso específico por su `id` (`GET /api/cursos/:id`).
2.  **`mockTestimonios`**: Representa un recurso **"Testimonios"**. Al igual que los cursos, su estructura con un `id` único se presta para una API RESTful completa.

A continuación, la estructura JSON con los archivos de rutas generados.

```json
{
  "routes": [
    {
      "name": "CursosRoutes",
      "fileName": "cursos.routes.js",
      "content": "import { Router } from 'express';\nimport { body, param, validationResult } from 'express-validator';\n\n// --- Importación de Controladores (Asumidos) ---\n// Estos controladores contendrían la lógica para interactuar con la base de datos o los datos mock.\n// import {\n//   obtenerCursos,\n//   obtenerCursoPorId,\n//   crearCurso,\n//   actualizarCurso,\n//   eliminarCurso\n// } from '../controllers/cursos.controller.js';\n\nconst router = Router();\n\n// --- Middlewares de Validación Específicos para Cursos ---\n\n// Middleware para validar que el ID en el parámetro sea un entero válido\nconst validarIdEnParametro = [\n  param('id').isInt({ min: 1 }).withMessage('El ID del curso debe ser un número entero positivo.')\n];\n\n// Middleware para validar los datos del cuerpo (body) al crear o actualizar un curso\nconst validarDatosCurso = [\n  body('title')\n    .trim()\n    .notEmpty().withMessage('El título es obligatorio.')\n    .isLength({ min: 5 }).withMessage('El título debe tener al menos 5 caracteres.'),\n  body('instructor')\n    .trim()\n    .notEmpty().withMessage('El nombre del instructor es obligatorio.'),\n  body('level')\n    .isIn(['Principiante', 'Intermedio', 'Avanzado']).withMessage('El nivel debe ser Principiante, Intermedio o Avanzado.'),\n  body('duration')\n    .notEmpty().withMessage('La duración es obligatoria.'),\n  body('rating')\n    .optional()\n    .isFloat({ min: 0, max: 5 }).withMessage('La calificación debe ser un número entre 0 y 5.'),\n  body('thumbnail')\n    .optional()\n    .isURL().withMessage('El thumbnail debe ser una URL válida.')\n];\n\n// --- Middleware para Manejar Errores de Validación ---\n\n// Este middleware centraliza el manejo de errores de express-validator\n// Si hay errores, responde con un 400 Bad Request; de lo contrario, pasa al siguiente middleware (el controlador).\nconst manejarErroresValidacion = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  next();\n};\n\n// --- Wrapper para Rutas Asíncronas (Manejo de Errores) ---\n\n// Utilidad para evitar bloques try-catch repetitivos en los controladores asíncronos.\n// Captura cualquier error en operaciones asíncronas y lo pasa al middleware de error de Express.\nconst asyncHandler = (fn) => (req, res, next) => {\n  Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n\n// --- Definición de Rutas para el Recurso 'Cursos' ---\n\n/**\n * @route   GET /api/cursos\n * @desc    Obtener una lista de todos los cursos populares.\n * @access  Public\n */\nrouter.get('/', asyncHandler(/* obtenerCursos */ (req, res) => {\n  res.status(200).json({ message: 'Controlador obtenerCursos ejecutado' });\n}));\n\n/**\n * @route   GET /api/cursos/:id\n * @desc    Obtener un curso específico por su ID.\n * @access  Public\n */\nrouter.get('/:id',\n  validarIdEnParametro,\n  manejarErroresValidacion,\n  asyncHandler(/* obtenerCursoPorId */ (req, res) => {\n    res.status(200).json({ message: `Controlador obtenerCursoPorId ejecutado para id: ${req.params.id}` });\n  })\n);\n\n/**\n * @route   POST /api/cursos\n * @desc    Crear un nuevo curso.\n * @access  Private (requeriría autenticación en una app real)\n */\nrouter.post('/',\n  validarDatosCurso,\n  manejarErroresValidacion,\n  asyncHandler(/* crearCurso */ (req, res) => {\n    // El controlador crearía el curso y devolvería el nuevo recurso.\n    res.status(201).json({ message: 'Controlador crearCurso ejecutado', data: req.body });\n  })\n);\n\n/**\n * @route   PUT /api/cursos/:id\n * @desc    Actualizar un curso existente por su ID.\n * @access  Private\n */\nrouter.put('/:id',\n  [\n    ...validarIdEnParametro,\n    ...validarDatosCurso\n  ],\n  manejarErroresValidacion,\n  asyncHandler(/* actualizarCurso */ (req, res) => {\n    res.status(200).json({ message: `Controlador actualizarCurso ejecutado para id: ${req.params.id}`, data: req.body });\n  })\n);\n\n/**\n * @route   DELETE /api/cursos/:id\n * @desc    Eliminar un curso por su ID.\n * @access  Private\n */\nrouter.delete('/:id',\n  validarIdEnParametro,\n  manejarErroresValidacion,\n  asyncHandler(/* eliminarCurso */ (req, res) => {\n    // Una respuesta exitosa para DELETE no suele tener contenido.\n    res.status(204).send();\n  })\n);\n\nexport default router;\n",
      "description": "Define las rutas RESTful para el recurso 'Cursos'. Incluye endpoints para obtener, crear, actualizar y eliminar cursos. Implementa validación de datos con `express-validator` para los parámetros de ruta y el cuerpo de la solicitud, y un manejo de errores robusto para operaciones asíncronas."
    },
    {
      "name": "TestimoniosRoutes",
      "fileName": "testimonios.routes.js",
      "content": "import { Router } from 'express';\nimport { body, param, validationResult } from 'express-validator';\n\n// --- Importación de Controladores (Asumidos) ---\n// import {\n//   obtenerTestimonios,\n//   obtenerTestimonioPorId,\n//   crearTestimonio,\n//   actualizarTestimonio,\n//   eliminarTestimonio\n// } from '../controllers/testimonios.controller.js';\n\nconst router = Router();\n\n// --- Middlewares de Validación Específicos para Testimonios ---\n\n// Valida que el ID en el parámetro sea un entero.\nconst validarIdEnParametro = [\n  param('id').isInt({ min: 1 }).withMessage('El ID del testimonio debe ser un número entero positivo.')\n];\n\n// Valida los datos del cuerpo al crear o actualizar un testimonio.\nconst validarDatosTestimonio = [\n  body('name')\n    .trim()\n    .notEmpty().withMessage('El nombre es obligatorio.'),\n  body('role')\n    .trim()\n    .notEmpty().withMessage('El rol es obligatorio.'),\n  body('quote')\n    .trim()\n    .notEmpty().withMessage('La cita (quote) es obligatoria.')\n    .isLength({ min: 20 }).withMessage('La cita debe tener al menos 20 caracteres.'),\n  body('rating')\n    .notEmpty().withMessage('La calificación es obligatoria.')\n    .isInt({ min: 1, max: 5 }).withMessage('La calificación debe ser un número entero entre 1 y 5.'),\n  body('avatar')\n    .optional()\n    .isURL().withMessage('El avatar debe ser una URL válida.')\n];\n\n// --- Middleware para Manejar Errores de Validación ---\n\nconst manejarErroresValidacion = (req, res, next) => {\n  const errors = validationResult(req);\n  if (!errors.isEmpty()) {\n    return res.status(400).json({ errors: errors.array() });\n  }\n  next();\n};\n\n// --- Wrapper para Rutas Asíncronas (Manejo de Errores) ---\n\nconst asyncHandler = (fn) => (req, res, next) => {\n  Promise.resolve(fn(req, res, next)).catch(next);\n};\n\n// --- Definición de Rutas para el Recurso 'Testimonios' ---\n\n/**\n * @route   GET /api/testimonios\n * @desc    Obtener todos los testimonios.\n * @access  Public\n */\nrouter.get('/', asyncHandler(/* obtenerTestimonios */ (req, res) => {\n  res.status(200).json({ message: 'Controlador obtenerTestimonios ejecutado' });\n}));\n\n/**\n * @route   GET /api/testimonios/:id\n * @desc    Obtener un testimonio por su ID.\n * @access  Public\n */\nrouter.get('/:id',\n  validarIdEnParametro,\n  manejarErroresValidacion,\n  asyncHandler(/* obtenerTestimonioPorId */ (req, res) => {\n    res.status(200).json({ message: `Controlador obtenerTestimonioPorId ejecutado para id: ${req.params.id}` });\n  })\n);\n\n/**\n * @route   POST /api/testimonios\n * @desc    Crear un nuevo testimonio.\n * @access  Private\n */\nrouter.post('/',\n  validarDatosTestimonio,\n  manejarErroresValidacion,\n  asyncHandler(/* crearTestimonio */ (req, res) => {\n    res.status(201).json({ message: 'Controlador crearTestimonio ejecutado', data: req.body });\n  })\n);\n\n/**\n * @route   PUT /api/testimonios/:id\n * @desc    Actualizar un testimonio existente.\n * @access  Private\n */\nrouter.put('/:id',\n  [\n    ...validarIdEnParametro,\n    ...validarDatosTestimonio\n  ],\n  manejarErroresValidacion,\n  asyncHandler(/* actualizarTestimonio */ (req, res) => {\n    res.status(200).json({ message: `Controlador actualizarTestimonio ejecutado para id: ${req.params.id}`, data: req.body });\n  })\n);\n\n/**\n * @route   DELETE /api/testimonios/:id\n * @desc    Eliminar un testimonio.\n * @access  Private\n */\nrouter.delete('/:id',\n  validarIdEnParametro,\n  manejarErroresValidacion,\n  asyncHandler(/* eliminarTestimonio */ (req, res) => {\n    res.status(204).send();\n  })\n);\n\nexport default router;\n",
      "description": "Define las rutas RESTful para el recurso 'Testimonios'. Implementa endpoints para todas las operaciones CRUD (Crear, Leer, Actualizar, Eliminar). Incluye validación de datos para garantizar la integridad de la información y manejo de errores para las operaciones asíncronas."
    }
  ]
}
```